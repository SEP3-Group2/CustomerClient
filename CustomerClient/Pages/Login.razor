@page "/login"
@namespace LoginComponent
@using CustomerClient.Authentication
@using CustomerClient.Data;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IUserService UserService
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@inject IUserService CloudUserService

<AuthorizeView>
    <NotAuthorized>


        <div class="container">
            <div class="row">
                <div class=" mx-auto">

                    <h5 class="card-title text-center">Login</h5>
                    <form class="form-login">
                        <div class="form-label-group">
                            <label class="oi oi-person">  Email</label>
                            <input type="email" class="form-control" placeholder="Email" @bind-value="Email" required>
                        </div>
                        <div class="form-label-group">
                            <label class="oi oi-lock-locked"> Password</label>
                            <input type="password" class="form-control" placeholder="Password" @bind-value="password" required>
                        </div>

                    </form>
                    <div class="form-label-group">
                        <button class="btn btn-outline-success btn-block text-uppercase" type="submit" @onclick="PerformLogin">Login</button>
                        <p class="text-center">Don't have an account? <a class="btn btn-primary" href="Register">Sign up</a> </p>
                    </div>

                </div>

            </div>
        </div>
    </NotAuthorized>
    <Authorized>
        <div class="container">
            <div class="row">
                <div class=" mx-auto">
                    <button class="btn btn-outline-danger btn-block" href="" @onclick="PerformLogout">
                        Log out
                    </button>
                </div>
            </div>
        </div>
    </Authorized>
</AuthorizeView>

@code {
    private string Email;
    private string password;
    private string errorMessage;
    [CascadingParameter] protected Task<AuthenticationState> AuthStat { get; set; }
    public async Task PerformLogin()
    {
        errorMessage = "";
        try
        {
           await ((CustomAuthenticationStateProvider)AuthenticationStateProvider).ValidateLogin(Email, password);
            var userPrincipal = (await AuthStat).User;

            UserService.setUserId(int.Parse(userPrincipal.FindFirst(c => c.Type == ClaimTypes.SerialNumber)?.Value));
            Email = "";
            password = "";
            if (CloudUserService.getBool() == true)
            {
                NavigationManager.NavigateTo("/cart");
                CloudUserService.setBool(false);
            }
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
        }
    }

    public async Task PerformLogout()
    {
        errorMessage = "";
        Email = "";
        password = "";
        try
        {
            ((CustomAuthenticationStateProvider)AuthenticationStateProvider).Logout();
            NavigationManager.NavigateTo("/");
        }
        catch (Exception e) { }
    }

}