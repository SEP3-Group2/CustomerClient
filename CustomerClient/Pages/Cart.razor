@page  "/cart"
@using CustomerClient.Models;
@using CustomerClient.Data;
@inject IUserService CloudUserService
@inject IProductService ProductService
@inject IWarehouseService WarehouseService
@inject ITransactionService TransactionService
@inject ITransactionProductService TransactionProductService
@inject NavigationManager NavigationManager
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization

@if (products.Count == 0)
{
    <h1>Cart is empty!</h1>
}
else
{
    @if (cartHidden == false)
    {
        <table class="table cartTable">
            <thead class="cartThead">
                <tr>
                    <th>Title</th>
                    <th>Category</th>
                    <th>Price</th>
                    <th>Quantity</th>
                    <th>Remove from Cart</th>
                </tr>
            </thead>
            <tbody class="cartTbody">
                @foreach (var product in products.ToList())
                {
                    <tr>
                        <td>@product.Title</td>
                        <td>@product.Category</td>
                        <td>@product.Price</td>
                        <td>
                            <input type="number" @bind=@product.Quantity style="width:55px" />
                        </td>
                        <td>
                            <button @onclick="@(() => RemoveFromCart(product))">
                                <i class="oi oi-trash" style="color:red" />
                            </button>
                        </td>
                    </tr>
                    @if (@product.Quantity > 5)
                    {
                        product.Quantity = 5;
                    }
                    @if (@product.Quantity == @product.Quantity)
                    {
                        UpdateTotalPrice();
                    }
                    @if (@product.Quantity < 1)
                    {
                        RemoveFromCart(product);
                    }
                }
            </tbody>
        </table>

        <p>
            Total price: <span>@totalPrice</span>
        </p>

        <p>
            <button class="btn btn-success" @onclick="DeliveryForm"><i class="material-icons">add_shopping_cart</i> Order Items</button>
        </p>
        <AuthorizeView>
            <p>
                <button class="btn btn-outline-primary" @onclick="ReservationForm"><i class="material-icons">add_shopping_cart</i> Reserve Items</button>
            </p>
        </AuthorizeView>
        <p>
            <button class="btn btn-outline-dark" @onclick="StockCheck"><i class="material-icons">add_shopping_cart</i> Check quantity</button>
        </p>
    }

    @if (orderHidden == false)
    {
        <table class="col-md-4 mx-auto">
            <thead>
                <tr>
                    <th>Title</th>
                    <th>Quantity</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var product in products.ToList())
                {
                    <tr>
                        <td>@product.Title</td>
                        <td>@product.Quantity</td>
                    </tr>
                }
            </tbody>
        </table>

        <p class="col-md-2 mx-auto">
            Total price: <span>@totalPrice</span>
        </p>

        <EditForm Model="@newTransaction" OnValidSubmit="@CreateTransaction">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="container">

                <div class="row">
                    <div class="col-md-9 mx-auto">
                        <div class="card card-register">
                            <div class="card-body">
                                <h5 class="card-title text-center">Customer Information</h5>
                                <form class="form-register">

                                    <div class="form-label-group">

                                        <label><i class="material-icons"> email </i> Email: </label>
                                        <InputText class="form-control" @bind-Value="newTransaction.Email" placeholder="Email" />

                                        <label><i class="material-icons"> account_box </i> Name:</label>
                                        <InputText class="form-control" @bind-Value="newTransaction.CustomerName" placeholder="Name" />

                                        <label><i class="material-icons"> home </i> Address:</label>
                                        <InputText class="form-control" @bind-Value="newTransaction.Address" placeholder="Address" />

                                        <label><i class="material-icons"> perm_phone_msg </i> Phone Number:</label>
                                        <InputText class="form-control" @bind-Value="newTransaction.Phone" placeholder="Phone Number" />
                                    </div>
                                </form>

                                <button class="btn btn-outline-success btn-block text-uppercase" type="submit" style="margin-left: .5rem;">Deliver Items</button>
                                <a class="btn btn-outline-success btn-block text-uppercase" @onclick="goToLogin" style="margin-left: .5rem;">Login</a>
                                <a class="btn btn-outline-primary btn-block text-uppercase" @onclick="backToCart" style="margin-left: .5rem;">Back</a>
                            </div>
                        </div>

                        <footer>
                            <div class="footer-copyright text-center py-3">
                                © 2020 Copyright SEP3-Group2
                            </div>

                        </footer>

                    </div>
                </div>
            </div>
        </EditForm>

        //these two buttons cannot be inside editform

    }
    @if (reservationHidden == false)
    {
        <table class="col-md-4 mx-auto">
            <thead>
                <tr>
                    <th>Title</th>
                    <th>Quantity</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var product in products.ToList())
                {
                    <tr>
                        <td>@product.Title</td>
                        <td>@product.Quantity</td>
                    </tr>
                }
            </tbody>
        </table>

        <p class="col-md-2 mx-auto">
            Total price: <span>@totalPrice</span>
        </p>

        <EditForm Model="@newTransaction" OnValidSubmit="@CreateReservation">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="container">

                <div class="row">
                    <div class="col-md-9 mx-auto">
                        <div class="card card-register">
                            <div class="card-body">
                                <h5 class="card-title text-center">Customer Information</h5>
                                <form class="form-register">

                                    <div class="form-label-group">
                                        <label> <i class="material-icons"> store </i> Store:</label>

                                        <select class="form-control" @bind="storename" required>
                                            @if (stores.Count == 0)
                                            {
                                                <option>All stores out of stock</option>
                                            }
                                            @if (stores.Count == 1)
                                            {
                                                @if (stores.Contains("Horsens"))
                                                {
                                                    <option>Horsens</option>
                                                }
                                                @if (stores.Contains("Aalborg"))
                                                {
                                                    <option>Aalborg</option>
                                                }
                                                @if (stores.Contains("Frederiksberg"))
                                                {
                                                    <option>Frederiksberg</option>
                                                }
                                            }
                                            @if (stores.Count == 2)
                                            {
                                                @if (stores.Contains("Horsens") && stores.Contains("Aalborg"))
                                                {
                                                    <option>Horsens</option>
                                                    <option>Aalborg</option>
                                                }
                                                @if (stores.Contains("Aalborg") && stores.Contains("Frederiksberg"))
                                                {
                                                    <option>Aalborg</option>
                                                    <option>Frederiksberg</option>

                                                }
                                                @if (stores.Contains("Horsens") && stores.Contains("Frederiksberg"))
                                                {
                                                    <option>Horsens</option>
                                                    <option>Frederiksberg</option>
                                                }
                                            }
                                            @if (stores.Count == 3)
                                            {
                                                <option>Horsens</option>
                                                <option>Aalborg</option>
                                                <option>Frederiksberg</option>
                                            }
                                        </select>

                                        <label><i class="material-icons"> email </i> Email: </label>
                                        <InputText class="form-control" @bind-Value="newTransaction.Email" placeholder="Email" />

                                        <label><i class="material-icons"> account_box </i> Name:</label>
                                        <InputText class="form-control" @bind-Value="newTransaction.CustomerName" placeholder="Name" />

                                        <label><i class="material-icons"> home </i> Address:</label>
                                        <InputText class="form-control" @bind-Value="newTransaction.Address" placeholder="Address" />

                                        <label><i class="material-icons"> perm_phone_msg </i> Phone Number:</label>
                                        <InputText class="form-control" @bind-Value="newTransaction.Phone" placeholder="Phone Number" />
                                    </div>
                                </form>

                                <button class="btn btn-outline-success btn-block text-uppercase" type="submit" style="margin-left: .5rem;">Reserve Items</button>
                            </div>
                        </div>

                        <footer>
                            <div class="footer-copyright text-center py-3">
                                © 2020 Copyright SEP3-Group2
                            </div>

                        </footer>

                    </div>
                </div>
            </div>
        </EditForm>

        //this button cannot be inside editform
        <button class="btn btn-outline-primary btn-block text-uppercase" @onclick="backToCart" style="margin-left: .5rem;">Back</button>
    }

    @if (stockCheckHidden == false)
    {
        <button class="btn btn-outline-primary btn-block text-uppercase" @onclick="backToCart" style="margin-left: .5rem;">Back</button>

        <table class="table">
            <thead>
                <tr>
                    <th>Store</th>
                    <th>Quantity</th>
                    <th>Product Title</th>
                    <th>Category</th>
                </tr>
            </thead>
            <tbody>
                @if (store1NotHave.Count != 0)
                {
                    <tr class="rowsToColor">
                        <td>Horsens only has:</td>
                        <td>
                            @foreach (var hasOne in store1NotHave)
                            {
                        <tr class="rowsToColor">
                            <td>@hasOne.Quantity</td>
                        </tr>
                    }
                            </td>
                        <td>
                            @foreach (var hasOne in store1NotHave)
                            {
                            <tr class="rowsToColor">
                                <td>@hasOne.Title</td>
                            </tr>
                        }
                            </td>
                            <td>
                                @foreach (var hasOne in store1NotHave)
                                {
                                <tr class="rowsToColor">
                                    <td>@hasOne.Category</td>
                                </tr>
                            }
                                </td>
                                </tr>
                            }

                @if (store2NotHave.Count != 0)
                {
                    <tr class="rowsToColor">
                        <td>Aalborg only has:</td>
                        <td>
                            @foreach (var has2 in store2NotHave)
                            {
                        <tr class="rowsToColor">
                            <td>@has2.Quantity</td>
                        </tr>
                    }
                            </td>
                            <td>
                                @foreach (var has2 in store2NotHave)
                                {
                                <tr class="rowsToColor">
                                    <td>@has2.Title</td>
                                </tr>
                            }
                                </td>
                                <td>
                                    @foreach (var has2 in store2NotHave)
                                    {
                                    <tr class="rowsToColor">
                                        <td>@has2.Category</td>
                                    </tr>
                                }
                                    </td>
                                    </tr>
                                }

                @if (store3NotHave.Count != 0)
                {
                    <tr class="rowsToColor">
                        <td>Frederiksberg only has:</td>
                        <td>
                            @foreach (var has3 in store3NotHave)
                            {
                        <tr class="rowsToColor">
                            <td>@has3.Quantity</td>
                        </tr>
                    }
                            </td>
                            <td>
                                @foreach (var has3 in store3NotHave)
                                {
                                <tr class="rowsToColor">
                                    <td>@has3.Title</td>
                                </tr>
                            }
                                </td>
                                <td>
                                    @foreach (var has3 in store3NotHave)
                                    {
                                    <tr class="rowsToColor">
                                        <td>@has3.Category</td>
                                    </tr>
                                }
                                    </td>
                                    </tr>
                                }
                </tbody>
            </table>

        }
}





@code {
    double totalPrice = 0;
    List<ProductQuantity> products = new List<ProductQuantity>();

    List<int> productIds = new List<int>();
    List<CartProduct> productsInCart = new List<CartProduct>();
    List<CartProduct> notEnoughStock = new List<CartProduct>();
    int storeIdDeliver = 0;
    string storename = "";

    private List<string> stores = new List<string>();

    Transaction newTransaction = new Transaction();

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private bool cartHidden = false;
    private bool orderHidden = true;
    private bool reservationHidden = true;
    private bool stockCheckHidden = true;

    List<CartProduct> store1NotHave = new List<CartProduct>();
    List<CartProduct> store2NotHave = new List<CartProduct>();
    List<CartProduct> store3NotHave = new List<CartProduct>();

    protected override async Task OnInitializedAsync()
    {

        products = ProductService.getProductsFromCart();

        foreach (var product in ProductService.getProductsFromCart())
        {
            totalPrice += product.Price * product.Quantity;
            if (product.Quantity > 5)
            {
                product.Quantity = 5;
            }
        }
    }

    private void UpdateTotalPrice()
    {
        totalPrice = 0;
        foreach (var product in ProductService.getProductsFromCart())
        {
            totalPrice += product.Price * product.Quantity;
        }
    }

    private void RemoveFromCart(ProductQuantity productRemove)
    {
        ProductService.RemoveTitle(productRemove);
        ProductService.RemoveProductFromCart(productRemove);
        UpdateTotalPrice();
    }

    public async Task getEnoughProducts()
    {
        foreach (var product in products)
        {
            productIds.Add(product.ID);
            productsInCart.AddRange(await WarehouseService.GetWarehouseProductFromStore(product.ID, product.Quantity));
            notEnoughStock.AddRange(await WarehouseService.GetNotWarehouseProductFromStore(product.ID, product.Quantity));
        }
    }


    public void backToCart()
    {
        NavigationManager.NavigateTo("/login");
        NavigationManager.NavigateTo("/cart");
    }

    public async Task<bool> checkStockAvailabilty()
    {
        await getEnoughProducts();

        List<CartProduct> productsInStore1 = new List<CartProduct>();
        List<CartProduct> productsInStore2 = new List<CartProduct>();
        List<CartProduct> productsInStore3 = new List<CartProduct>();


        foreach (var product in productsInCart)
        {
            if (product.StoreId == 1)
            {
                productsInStore1.Add(product);
            }
            if (product.StoreId == 2)
            {
                productsInStore2.Add(product);
            }
            if (product.StoreId == 3)
            {
                productsInStore3.Add(product);
            }
        }

        foreach (var product in notEnoughStock)
        {
            if (product.StoreId == 1)
            {
                store1NotHave.Add(product);
            }
            if (product.StoreId == 2)
            {
                store2NotHave.Add(product);
            }
            if (product.StoreId == 3)
            {
                store3NotHave.Add(product);
            }
        }

        if (productsInStore1.Count == productIds.Count)
        {
            stores.Add("Horsens");
        }
        if (productsInStore2.Count == productIds.Count)
        {
            stores.Add("Aalborg");
        }
        if (productsInStore3.Count == productIds.Count)
        {
            stores.Add("Frederiksberg");
        }

        if (productsInStore1.Count == productIds.Count)
        {
            storeIdDeliver = 1;
            return true;
        }
        if (productsInStore2.Count == productIds.Count)
        {
            storeIdDeliver = 2;
            return true;
        }
        if (productsInStore3.Count == productIds.Count)
        {
            storeIdDeliver = 3;
            return true;
        }

        return false;
    }

    public void goToLogin()
    {
        CloudUserService.setBool(true);
        NavigationManager.NavigateTo("/login");
    }

    private async Task DeliveryForm()
    {
        if (await checkStockAvailabilty() == true)
        {
            var user = (await authenticationStateTask).User;

            if (user.Identity.IsAuthenticated)
            {
                newTransaction.CustomerName = user.FindFirst(c => c.Type == ClaimTypes.Name)?.Value.ToString();
                newTransaction.Address = user.FindFirst(c => c.Type == ClaimTypes.StreetAddress)?.Value.ToString();
                newTransaction.Phone = user.FindFirst(c => c.Type == ClaimTypes.MobilePhone)?.Value.ToString();
                newTransaction.Email = user.FindFirst(c => c.Type == ClaimTypes.Email)?.Value.ToString();
            }
            cartHidden = true;
            orderHidden = false;
            reservationHidden = true;
        }
        else
        {
            cartHidden = true;
            orderHidden = true;
            reservationHidden = true;
            stockCheckHidden = false;
        }
    }

    private async Task ReservationForm()
    {
        await checkStockAvailabilty();

        var user = (await authenticationStateTask).User;

        newTransaction.CustomerName = user.FindFirst(c => c.Type == ClaimTypes.Name)?.Value.ToString();
        newTransaction.Address = user.FindFirst(c => c.Type == ClaimTypes.StreetAddress)?.Value.ToString();
        newTransaction.Phone = user.FindFirst(c => c.Type == ClaimTypes.MobilePhone)?.Value.ToString();
        newTransaction.Email = user.FindFirst(c => c.Type == ClaimTypes.Email)?.Value.ToString();

        cartHidden = true;
        orderHidden = true;
        reservationHidden = false;
    }

    private async Task StockCheck()
    {
        await checkStockAvailabilty();

        cartHidden = true;
        orderHidden = true;
        reservationHidden = true;
        stockCheckHidden = false;
    }

    private async Task CreateTransaction()
    {
        if (products.Count == 0)
        {
            //Empty cart
            Console.WriteLine("Cart is empty");
        }
        else
        {
            newTransaction.StoreId = storeIdDeliver;
            DateTime today = DateTime.Today;
            string todayAsString = today.ToString("dd/MM/yyyy");
            newTransaction.Date = Convert.ToDateTime(todayAsString);
            newTransaction.TotalPrice = totalPrice;
            newTransaction.DeliveryMethod = "Delivered";
            await TransactionService.AddTransactionAsync(newTransaction);

            int lastTransactionid = await TransactionService.GetLastTransactiontID();

            foreach (var product in products)
            {
                TransactionProduct newOne = new TransactionProduct();
                newOne.ProductId = product.ID;
                newOne.Quantity = product.Quantity;
                newOne.TransactionId = lastTransactionid;
                await TransactionProductService.AddTransactionProductAsync(newOne);
                await WarehouseService.UpdateWarehouseQuantity(storeIdDeliver, product.ID, product.Quantity);
            }

            SuccessDeliver();
        }
    }

    private async Task CreateReservation()
    {
        if (products.Count == 0 || stores.Count == 0)
        {
            //Empty cart or all stores are out of stock
            Console.WriteLine("Cart is empty");
        }
        else
        {
            if (storename.Equals("Horsens") || storename == null)
            {
                storeIdDeliver = 1;
            }
            if (storename.Equals("Aalborg"))
            {
                storeIdDeliver = 2;
            }
            if (storename.Equals("Frederiksberg"))
            {
                storeIdDeliver = 3;
            }

            newTransaction.StoreId = storeIdDeliver;
            DateTime today = DateTime.Today;
            string todayAsString = today.ToString("dd/MM/yyyy");
            newTransaction.Date = Convert.ToDateTime(todayAsString);
            newTransaction.TotalPrice = totalPrice;
            newTransaction.DeliveryMethod = "Under preparation";
            await TransactionService.AddTransactionAsync(newTransaction);

            int lastTransactionid = await TransactionService.GetLastTransactiontID();

            foreach (var product in products)
            {
                TransactionProduct newOne = new TransactionProduct();
                newOne.ProductId = product.ID;
                newOne.Quantity = product.Quantity;
                newOne.TransactionId = lastTransactionid;
                await TransactionProductService.AddTransactionProductAsync(newOne);
            }

            SuccessDeliver();
        }
    }

    public void SuccessDeliver()
    {
        NavigationManager.NavigateTo("/orderHistory");
        foreach (var product in products.ToList())
        {
            RemoveFromCart(product);
        }
    }

}
